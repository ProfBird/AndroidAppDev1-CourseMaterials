/**
 * 
 */
package com.thira.examples.spring.validations.web.controllers;

import java.util.Calendar;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.thira.examples.spring.validations.web.model.SimpleFormBean;

/**
 * @author Thiranjith
 * 
 *         Created at 25/03/2013 1:06:46 PM
 * 
 */
@Controller
@RequestMapping("/simpleValidationExample")
public class SimpleFormValidationController {

    /**
     * Invoked initially to create the "form" attribute within the view (jsp). This will be created on a per-session basis.
     * 
     * @return {@link SimpleFormBean}
     * @see SessionAttributes
     */
    @ModelAttribute("simpleFormBean")
    public SimpleFormBean createSimpleFormBean() {
        return new SimpleFormBean();
    }

    @RequestMapping(method = RequestMethod.GET)
    public String form() {
        // Do nothing. First time around, the model attribute will be generated by Spring MVC making a call to createSimpleFormBean()
        // method.
        // Subsequent GET requests will fetch the model attribute from the HTTP session.
        return ViewNameConstants.VIEW_SIMPLE_FORM_VALIDATION;
    }

    /**
     * Handler for form submissions that uses Spring validation (due to the user of @Valid annotation on the input Bean). All the
     * constraints defined in {@link SimpleFormBean} will be checked by Spring, and the {@link BindingResult} will have errors if the Bean
     * is not valid.
     * 
     * @param formBean
     * @param result
     * @param model
     * @return
     */
    @RequestMapping(method = RequestMethod.POST)
    public ModelAndView processFormSubmissionWithValidation(@Valid
    SimpleFormBean formBean, BindingResult result, Model model) {
        ModelAndView mv = new ModelAndView(ViewNameConstants.VIEW_SIMPLE_FORM_VALIDATION);
        mv.addObject("message", String.format("Has errors (with Validation)? %b (on %s). Model value: %s.", result.hasErrors(), Calendar
                .getInstance().getTime(), formBean));
        if (result.hasErrors()) {
            mv.addObject("errors", result.getAllErrors());
            return mv;
        }

        // Do any other normal processing you might do when the user input is valid

        return mv;
    }

    /**
     * Handler for form submissions that does not apply Spring validations to our model attribute ({@link SimpleFormBean}).
     * 
     * @param formBean
     * @param result
     * @param model
     * @return
     */
    @RequestMapping(value = "/ignoreValidationRules", method = RequestMethod.POST)
    public ModelAndView processFormSubmissionWithoutValidation(SimpleFormBean formBean, BindingResult result, Model model) {
        ModelAndView mv = new ModelAndView(ViewNameConstants.VIEW_SIMPLE_FORM_VALIDATION);
        mv.addObject("message", String.format("Has errors (without Validation)? %b (on %s). Model value: %s.", result.hasErrors(), Calendar
                .getInstance().getTime(), formBean));
        if (result.hasErrors()) {
            // NOTE: This block will never be reached because we have omitted the @Valid annotation. Therefore, Spring is not performing any
            // validation on our SimpleFormBean model attribute!
            mv.addObject("errors", result.getAllErrors());
            return mv;
        }

        return mv;
    }
}
