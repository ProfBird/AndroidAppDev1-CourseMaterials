/**
 * 
 */
package com.thira.examples.spring.validations.web.controllers;

import java.util.Calendar;

import javax.validation.Valid;
import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.thira.examples.spring.validations.web.model.CustomMessageFormBean;

/**
 * @author Thiranjith
 * 
 *         Created at 26/03/2013 3:27:21 PM
 * 
 */
@Controller
@RequestMapping("/simpleValidationWithCustomMessagesExample")
public class SimpleFormValidationWithCustomMessagesController {

    @Autowired
    private Validator validator;

    /**
     * Invoked initially to create the "form" attribute within the view (jsp). This will be created on a per-session basis.
     * 
     * @return {@link CustomMessageFormBean}
     * @see SessionAttributes
     */
    @ModelAttribute("customMessageFormBean")
    public CustomMessageFormBean createCustomMessageFormBean() {
        return new CustomMessageFormBean();
    }

    @RequestMapping(method = RequestMethod.GET)
    public String form() {
        // Do nothing. First time around, the model attribute will be generated by Spring MVC making a call to createCustomMessageFormBean()
        // method.
        // Subsequent GET requests will fetch the model attribute from the HTTP session.
        return ViewNameConstants.VIEW_SIMPLE_FORM_WITH_CUSTOM_VALIDATION_MESSAGES;
    }

    /**
     * Handler for form submissions that uses Spring validation (due to the user of @Valid annotation on the input Bean). All the
     * constraints defined in {@link CustomMessageFormBean} will be checked by Spring, and the {@link BindingResult} will have errors if the
     * Bean is not valid.
     * 
     * @param formBean
     * @param result
     * @param model
     * @return
     */
    @RequestMapping(method = RequestMethod.POST)
    public ModelAndView processFormSubmissionWithValidation(@Valid
    CustomMessageFormBean formBean, BindingResult result, Model model) {
        ModelAndView mv = new ModelAndView(ViewNameConstants.VIEW_SIMPLE_FORM_WITH_CUSTOM_VALIDATION_MESSAGES);
        mv.addObject("message",
                String.format("Has errors? %b (on %s). Model value: %s.", result.hasErrors(), Calendar.getInstance().getTime(), formBean));
        if (result.hasErrors()) {
            mv.addObject("errors", result.getAllErrors());
            return mv;
        }

        // Do any other normal processing you might do when the user input is valid

        return mv;
    }
}
